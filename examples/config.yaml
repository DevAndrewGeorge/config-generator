# `plugins`
# This section configures plugins.
# Structure: plugins > [cosmetic name] > [plugin type] > [plugin configuration]
# Below are the implicitly defined plugins and their exhaustive configuration defaults.
# You may explicitly override these cosmetic names or create as many additional cosmetically named plugins.
# Any configuration option not explictly overridden will fallback to its default.
plugins:
  # `console` plugin
  # Populates variables with values supplied by the user at runtime.
  console:
    console: {}

  # `environment` plugin
  # Populates variables with environment variables.
  environment:
    environment:
      # If left null, all runtime environment variables are used.
      # Otherwise, must be a path to a file containing lines of NAME=VALUE.
      file:

  # `file` plugin
  # Populates variables with the contents of a file.
  file:
    file: {}

  # `http` plugin
  http:
    http: {}

  # `kubernetes` plugin
  # Populates variables with values from ConfigMaps or Secrets.
  kubernetes:
    kubernetes:
      kubeconfig: ~/.kube/config

  # `multi` plugin
  # A special plugin that iterates through listed plugins until one returns successfully.
  multi:
    multi: {}

  # `static` plugin
  # Populates variables with statically assigned values.
  static:
    static: {}

  # `script` plugin
  # Populates variables with the output from an executed script.
  script:
    script:
      shell: /bin/sh
      # Defaults to the calling user.
      user:
      # Default to the calling group.
      group:

  # `vault` plugin
  # Populates variables with the response body of a Hashicorp Vault request.
  vault:
    vault:
      # Defaults to VAULT_TOKEN environment variable followed by the contents in ~/.vault_token. Otherwise null.
      token:
      # Defaults to VAULT_ADDR environment variable. Otherwise http://locahost:9200.
      address:
      # Defaults to VAULT_CACERT environment variable. Otherwise null.
      ca_cert:
      # Defults to VAULT_CAPATH environment variable. Otherwise null
      ca_path:
      # Defaults to VAULT_SKIP_VERIFY environment variable. Otherwise false.
      skip_verify:



# `variables`
# This section uses plugins to populate variables.
# Structure: variables > [variable name] > {required:bool, sensitive:bool, [cosmetic plugin name]} > [plugin arguments]
# Below are exhaustive examples on variable arguments and plugin arguments.
# Unless otherwise specified, all [plugin environments] are required for the given use case.
variables:
  required-and-sensitive-example:
    # Required variables will cause generator to error out if the plugin returns nothing. Defaults to "true".
    required: true
    # Sensitive variables are intentionally kept out of log outputs. Defaults to "true".
    sensitive: true
    # Validate performs a list of tests which all must return true for the variable to be set.
    # Defaults to checking if returned value is not the empty string.
    validate:
    - regex: .+
    static: hello world

  # Exposes to templates a dictionary whose keys are environment variable names.
  environment-variable-1:
    environment:

  # Exposes to templates a string whose value is the value of the environment variable named.
  environment-variable-2:
    environment: ENVIRONMENT_VARIABLE_NAME

  # Exposes to templates a string whose value is the content of the file.
  file-variable-1:
    file: /path/to/file

  # Exposes to templates a dictionary whose keys are filenames and whose values are the file contents.
  # Keys are base names.
  file-variable-2:
    file: /path/to/directory

  # Exposes to templates the response body of an HTTP request.
  # "verify" has no effect on HTTP requests.
  # "body" has no effect on HTTP methods that do not require a body.
  http-variable-1:
    http:
      url: https://localhost
      verify: true
      method: post
      headers: {}
      body: {}

  # Exposes to templates a dictionary whose keys are keys in the ConfigMap/Secret and whose values are associated plaintext.
  # "kind" be be either "ConfigMap" or "Secret".
  kubernetes-variable-1:
    kubernetes:
      apiVersion: v1
      kind: ConfigMap
      namespace: desired-namespace
      name: name-of-configmap-or-secret

  # Exposes to templates a string whose value is received from the prompted user.
  # If marked sensitive (the default), no input will be echoed to the console.
  # Otherwise, keystrokes will be echoed back to the user.
  console-variable-1:
    console:

  # Exposes to templates a string whose value is explicitly defined here.
  static-variable-1:
    static: some text

  # Exposes to templates a string whose value is the output of the script.
  script-variable-1:
    script: |
      echo hello

  # Exposes to templates a string whose value is the output of the script.
  script-variable-2:
    script:
      path: /path/to/script

  # Exposes to templates a dictionary representing Vault's response.
  vault-variable-1:
    named-vault-plugin: # /path/in/vault
      path: /path/in/vault
      method: get

  # Exposes to templates a dictionary representing Vault's response.
  vault-variable-2:
    vault:
      path: /path/in/vault
      method: post
      body:
        parameter1: foo
        parameter2:
          parameter3: bar

  # Iterates through a list of plugins until one returns a validated value or the list is exhausted.
  multi-variable-1:
    multi:
    - file: /path/that/does/not/exist
    - environment: ENVIRONMENT_VARIABLE_THAT_DOES_NOT_EXIST
    - static: 8.8.8.8

  # Below is an ehaustive list of all validation tests.
  validate-example:
    validate:
    - regex: "[0-9.]+"
    - command: ping -c 1 {{ validate-example }}
    static: 8.8.8.8



# `templates`
# This sections leverages Go templates with variables defined earlier to generate data to send to outputs.
# Basic examples start off below.
# There are also various examples of useful template paradigms that play well with various outputs.
templates:
  # Generates a simple string.
  # Useful for quick-and-dirty single line or otherwise simplistic templates.
  flat-inline-template: "{{ static-variable-1 }}"

  # Generates a simple string by using the template stored in the file.
  # Useful for more verbose templates.
  flat-file-template:
    file: /path/to/template

  # Generates a dictionary. Multi-level nesting is supported, but understand how it is parsed for various outputs.
  # Useful for outputs that naturally expect a dictionary, such as Kubernetes ConfigMaps and Secrets.
  nested-template:
    keys:
      A: |
        This is {{ static-variable-1 }} in an inline template.
      B:
        file: /path/to/template
      C:
        keys:
          C1: |
            This is getting ridiculous. Here's the user path: {{ environment-variable-1.PATH }}.

  environment-flat-template: |
    HELLO="{{ static-variable-1 }}"
    GOODBYE="goodbye moon"

  environment-nested-template:
    keys:
      HELLO: "{{ static-variable-1 }}"
      GOODBYE: "goodby moon"
      SPANISH:
        keys:
          HOLA: "{{ static-variable-1 }}"

  script-flat-template: "echo {{ static-variable-1 }}"

  script-nested-template:
    keys:
      echo: "echo {{ static-variable-1 }}"
      print: "print {{ static-variable-1 }}"

  vault-flat-template: |
    {
      "data": {
        "static": "{{ static-variable-1 }}"
      }
    }

  vault-nested-template:
    keys:
      data:
        keys:
          static: "{{ static-variable-1 }}"



# `outputs`
# This section outputs templates.
# Structure: [output name] > {template, redact:bool, show:bool, format:(yaml, json), string:bool, [cosmetic plugin name]}
# "show" will print the rendered template to the console for an output that would not otherwise print to the console. Defaults to false.
# "redact" will redact variables marked as "secret" that are used in rendered templates that are printed to the console (e.g. "PASSWORD" becomes P******D"). Defaults to true.
# "format" will coerce a dictionary template into a particular format. Defaults to "yaml". It has no effect on string templates.
# "string" will coerce an output to behave as if were using a string template. It has no effect on string templates.
# If "format" and "string" are used together, the resulting string will be in the desired format.
outputs:
  # Outputs a simple string to the console.
  console-output-1:
    template: flat-inline-template
    console:

  # Outputs JSON to the console.
  console-output-2:
    template: nested-template
    format: json
    console:

  # Outputs YAML to the console.
  console-output-3:
    template: nested-template
    format: yaml
    console:

  # Injects the environment variable HELLO whose value is the rendered flat-inline-template.
  environment-output-1:
    template: flat-inline-template
    environment:
      key: HELLO

  # Injects the environment variables HELLO and GOODBYE whose values are define in the rendered environment-flat-template.
  environment-output-2:
    template: environment-flat-template
    environment:

  # Injects environment variables HELLO, GOODBYE, and SPANISH.
  # When using a nested template, only top-level keys are injected.
  # Top-level keys whose values are nested templated will be coerced into strings of type "format".
  environment-output-3:
    template: environment-nested-template
    format: json
    environment:

  # Outputs the rendered flat-inline-template as a file.
  file-output-1:
    template: flat-inline-template
    file: /path/to/file

  # Outputs the rendered nested-template in a directory structure.
  # Keys whose values are nested templates will create directories.
  # Keys whose values are flat templates will create files.
  file-output-2:
    template: nested-template
    file: /path/to/directory

  # Submits the rendered template as the body of an HTTP "method" request to the given URL.
  http-output-1:
    template: flat-inline-template
    http:
      url: https://localhost
      verify: true
      method: post
      headers: {}

  # Submits the rendered and coerced template as the body of an HTTP "method" request to the given URL.
  http-output-2:
    template: nested-template
    format: json
    http:
      url: https://example.com
      verify: true
      method: post
      headers: {}

  # Creates a ConfigMap or Secret.
  # If name is omitted, defaults to the name of the template.
  # If key is omitted, defaults to the name of the template.
  kubernetes-output-1:
    template: flat-inline-template
    kubernetes:
      apiVersion: v1
      kind: ConfigMap
      namespace: desired-namespace
      name: name-of-configmap-or-secret
      key: key-name

  # Creates a ConfigMap or Secret whose keys are top-level keys in the nested template.
  # Any keys whose values are nested templates will be coerced into strings of type "format".
  # If name is omitted, defaults to the name of the template.
  kubernetes-output-2:
    template: nested-template
    format: json
    kubernetes:
      apiVersion: v1
      kind: ConfigMap # (or Secret)
      namespace: desired-namespace
      name: name-of-configmap-or-secret

  # Runs the rendered template as a script.
  script-output-1:
    template: script-flat-template
    script:

  # Runs each top-level key as a script.
  # Take care not to have top-level keys whose values are nested templates.
  script-output-2:
    template: script-nested-template
    script:

  # Makes a request to Vault at the given path.
  # The rendered template will become the body of the request if reasonable.
  vault-output-1:
    template: vault-static-template
    vault:
      path: /secret/data/example
      method: post

  # Makes a request to Vault at the given path.
  # The rendered template will become the body of the request if reasonable.
  # This is the equivalent of taking a nested template and coercing it into a json string.
  vault-output-2:
    template: vault-nested-template
    vault:
      path: /secret/data/example
      method: post
